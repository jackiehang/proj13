class Food{
    boolean sweet = false; //testing field
    boolean tasty = true;
    int calories=0;

    void addCals(){
        calories = calories +1;
        for(i = 0; i < 2; i++){ //testing for-loop
                    j = j + i; //testing addition
                }
    }

    void changeSweet(boolean newSweet){
        sweet = newSweet;
    }

    int getCals(){
        return calories;
    }

    boolean taste(){
        return sweet || tasty; //test or operator
    }

    boolean tasteTwo(){
        return sweet && tasty; //test and operator
    }

}

//testing inheritance
class Dessert extends Food{
    Utensil u; //test DeclStmt

    void setUtensil(Utensil utensil){
        u = utensil;
        var x = 2;
    }

}

class Utensil{
    String type = "hi";

    void setType(String typeOfUtensil){
        type = typeOfUtensil;
    }

    String getType(){
        return type;
    }

}

class Main extends Dessert{
    int x = 5;
    int z = 20;
    Food[] foods = new Food[5];
    Food cake;
    

    void methodTest(){
        var j = false;
        for(i = 0; i < 2; i++){ //testing for-loop
            j = j + i; //testing addition
        }

        for(i = 0; i < 2; i++){ //testing for-loop
            j++; //testing unary incr
        }

    }

    int methodTestTwo(){
        var y = z/x; //testing division and var expr

        if(y > 2){ //testing if statement and relational gt
            return 5;
        }
        return 0;
    }

    int methodTestThree(){
       undeclaredVariable = z/x; //testing undeclared variable assignment
       return 2;
    }

    void testWhileStmt(){
        var potato = 0;
        while(potato < 5){ //testing while stmt
            potato ++;
        }
    }

    int getX(){
        return x; //testing return statements
    }

    void main(){
	    var x = 2;
        cake = new Dessert();
        var iceCream = new Dessert();
        var spoon = new Utensil();
        spoon.setType("spoon");
        iceCream.setUtensil(spoon);
        iceCream.u.getType(); //testing chaining

        iceCream.addCals(); //testing inherited method
        //testing instanceof
        if( cake instanceof Dessert){
              var wrong = new Utensil();
        }

        var copy = cast(Food,cake);

        foods[3] = iceCream;
        foods[2] = spoon; //testing wrong array assignment

    }

}