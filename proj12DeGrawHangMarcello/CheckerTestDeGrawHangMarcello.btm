/*
 * File: CheckerTestDeGrawHangMarcello.btm
 * author: Lucas DeGraw, Jackie Hang, Chris Marcello
 * Project 12
 * Feb 25, 2019
 */

class Food{
    boolean sweet = false; //testing field
    boolean tasty = true;
    int calories=0;
    int num = 90;

    void addCals(){
        calories = calories +1;
    }

    void changeSweet(boolean newSweet){
        sweet = newSweet;
    }

    int getCals(){
        return calories;
    }

    boolean taste(){
        return sweet || tasty; //test or operator
    }

    boolean tasteTwo(){
        return sweet && tasty; //test and operator
    }

    //error : AssignExpr
    void incorrectChange(){
        tasty = 2;
    }

    // error : BinaryCompLeqExpr
    boolean badComp(){
        addCals();
        return calories <= tasty;
    }

    // error : BinaryCompGeqExpr
    boolean badComp2(){

       return calories >= tasty;
    }

    void classy(){
        calories = 100;
    }

}

//testing inheritance
class Dessert extends Food{
    Utensil u;
    boolean yummy = true;

    void setUtensil(Utensil utensil){
        u = utensil;
        var x = 2;
    }
    void changeYum(boolean yum){
        yummy == Food.tasty; //testing BinaryCompEqExpr
    }

}

class Utensil{
    String type = "hi";

    void setType(String typeOfUtensil){
        type = typeOfUtensil;
    }

    String getType(){
        return type;
    }

}

class Main{
    int x = 5;
    int z = 20;
    Food[] foods = new Food[5];
    Food cake;
    Food wrong;
    int[] q;


    void methodTest(){
        var j = 0; //testing var expr
        for(i = 0; i < 2; i++){ //testing for-loop
            j = j + i; //testing addition
        }

        for(i = 0; i < 2; i++){ //testing for-loop
            j++; //testing unary incr
        }

        j = z-cake; //testing subtraction

        j=j*j; //testing multiplication

    }

    int methodTestTwo(){
        var y = z/x; //testing division and var expr

        if(y > 2){ //testing if statement and relational gt
            return 5;
        }

        return 0;
    }

    int methodTestThree(){
       undeclaredVariable = z/x; //error : undeclared variable assignment
       return 2;
    }

    void testWhileStmt(){
        var potato = 0;
        while(potato < 5){ //testing while stmt and less than
            potato ++;
        }
    }

    int getX(){
        return x; //testing return statements
    }

    void testMethodFour(int j , int t){
        j = j+ t;
    }

    void main(){
        q[2] = "test"; // error: incorrect array assignment
	    var x = 2;
        cake = new Dessert();
        var iceCream = new Dessert();
        var spoon = new Utensil();
        spoon.setType("spoon");

        var fork = new Utensil();
        fork.setType("fork");
        iceCream.setUtensil(spoon);
        iceCream.u.getType(); //testing dispatch expr

        iceCream.addCals(); //testing inherited method
        //testing instanceof
        if( cake instanceof Dessert){
              wrong = new Utensil(); //Incorrect assignment
        }

        var copy = cast(Food,cake); // testing casting
        foods[3] = iceCream;
        foods[3].setUtensil(fork); //testing dispatch

        foods[2] = spoon; //testing wrong array assignment

        testMethodFour(true, 3); //Error :  dispatch expr

    }

}